// - створити функцію яка виводить масив
let masiv = [ 'Katya', 'Olya', 34, true, 195]
function write(){
    console.log(masiv)
}
write();

// - створити функцію яка заповнює масив рандомними числами та виводить його. Для виведення використати попвередню функцію.

let random_masiv = []
function random(){
    for(let i=0; i<20; i++){
        random_masiv[i] = Math.floor(Math.random(i)*100)
    }
    console.log(random_masiv)
}
random()

// - створити функцію яка приймає три числа та виводить та повертає найменьше.

function min (a, b, c = 0) {
   
      if(b<a){ a=b}
      if(c<a){ a=c}
      console.log(a)
      return a
      

}  
min(5,8,15)


// - створити функцію яка приймає три числа та виводить та повертає найбільше.

function max (a, b, c = 0) {
   
    if(b>a){ a=b}
    if(c>a){ a=c}
    console.log(a)
    return a
}  
max(5,8,15)

// - створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше

function mas_min_max () {
    let max = null;
    if(arguments.length>0){max = arguments[0]}
    for( let i =0; i<arguments.length; i++){
      if(arguments[i]>max){ max = arguments[i]}
    }

    let min = null;
    if(arguments.length>0){min = arguments[0]}
    for( let i =0; i<arguments.length; i++){
      if(arguments[i]<min){ min = arguments[i]}
    }
    console.log(min);
    return max;
    
    }  
    
    mas_min_max(-5, 5, 7, -9, 12, -90)

// - створити функцію яка повертає найбільше число з масиву
function max_mas () {
    let max = null;
    if(arguments.length>0){max = arguments[0]}
    for( let i =0; i<arguments.length; i++){
      if(arguments[i]>max){ max = arguments[i]}
    }
    return max;
       
    }  
    max_mas(-5, 5, 7, -9, 12, -90)

// - створити функцію яка повертає найменьше число з масиву

function min_mas () {
    let min = null;
    if(arguments.length>0){min = arguments[0]}
    for( let i =0; i<arguments.length; i++){
      if(arguments[i]<min){ min = arguments[i]}
    }
    return min;
       
    }  
   min_mas(-5, 5, 7, -9, 12, -90)

// - створити функцію яка приймає масив чисел та складає значення елементів масиву та повертає його.

function sum(){
    let s = 0;
    for(let i = 0; i<arguments.length; i++){
       s = s+ arguments[i]

    }
    
    return s
}
sum(3, 1, 7, -1)
// - створити функцію яка приймає масив чисел та повертає середнє арифметичне його значень.

function sr(){
    let sred = 0;
    for(let i = 0; i<arguments.length; i++){
       sred = sred+ arguments[i]
        }
        let final = sred/arguments.length;
    return final;
}
sr(3, 5, 7, -7)

// - Створити функцію яка приймає масив будь яких объектів, та повертає значення кількості об'єктів в масиві

function obj(){
    console.log(arguments.length)
    return arguments.length
}


obj({name:'Kolya', obj:'home'}, {name:'vasya',obj:'car'}, {name:'katya',obj:'food'}, {name:'liza',obj:'bag'});

// - Створити функцію яка приймає масив будь яких объектів, та повертає загальн кількість полів в них

function field(){
 let counter = 0;
    for(let el_1 of arguments)
    {
        for (let key in el_1) counter++;
    }
    console.log(counter); 
    return counter;
}
field({name:'Kolya', obj:'home'}, {name:'vasya',obj:'car'}, {name:'katya',obj:'food'}, {name:'liza',obj:'bag'} )

// - створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
//   Приклад
//   [1,2,3,4]
//   [2,3,4,5]
//   результат
//   [3,5,7,9]
// - *** приймає масив та число "i", та міняє місцями об`єкт який знаходиться в індексі "i" на "i+1"
// - *** створити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.
// Двожина масиву від 2 до 100
// Приклад
// [1,0,6,0,3] => [1,6,3,0,0]
// [0,1,2,3,4] => [1,2,3,4,0]
// [0,0,1,0]   => [1,0,0,0]

// Створити функцію яка :
// - Додає в боді блок з текстом "Hello owu"
function text (){
    document.write("Hello owu");
    document.write('<br>');
    }
text ()
// - Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи

function el_text (a){
      document.write(a);
      document.write('<br>');
      console.log(typeof a)
    }
el_text ('vhihcbacjk')

// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.
// Для кожної властивості створити всередені блока автомоблія свій блок

// (на основі минулого ДЗ)
// **- функція приймає 2 масиви з рівною кількістю об'єктів та з'єднює в один об'єкт користувача та місто з відповідними "id" та "user_id",
// та повертає масив цих з'єднаних об'єктів.
// Приклад масивів:
//             let usersWithId = [{id: 1, name: 'vasya', age: 31, status: false}, {id: 2, name: 'petya', age: 30, status: true}, {id: 3, name: 'kolya', age: 29, status: true}, {id: 4, name: 'olya', age: 28, status: false},];
//             let citiesWithId = [{user_id: 3, country: 'USA', city: 'Portland'}, {user_id: 1, country: 'Ukraine', city: 'Ternopil'}, {user_id: 2, country: 'Poland', city: 'Krakow'}, {user_id: 4, country: 'USA', city: 'Miami'},];
// Частковий приклад реультату:



// ***- беремо завдання з правилами з укроку №3 :
// Та робимо це функцією.При цьому правила отримувати через аргумент.
// "Є масив котрий характеризує правила. Створити скрипт який ітерує цей масив, та робить з кожне правило в окремому блоці.
// При цому в блоці, номер правила записати в свій блок, текст правила записати в свій окремий блок.
// Результатом відпрацювання скріпта повинна бути структура яка міститься в блоці wrap файла rule.html

// 			let rules = [
// 				{
// 					title: 'Первое правило Бойцовского клуба.',
// 					body: 'Никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Второе правило Бойцовского клуба.',
// 					body: 'Никогда никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Третье правило Бойцовского клуба.',
// 					body: 'В схватке участвуют только двое.'
// 				},
// 				{
// 					title: 'Четвертое правило Бойцовского клуба.',
// 					body: 'Не более одного поединка за один раз.'
// 				},
// 				{
// 					title: 'Пятое правило Бойцовского клуба.',
// 					body: 'Бойцы сражаются без обуви и голые по пояс.'
// 				},
// 				{
// 					title: 'Шестое правило Бойцовского клуба.',
// 					body: 'Поединок продолжается столько, сколько потребуется.'
// 				},
// 				{
// 					title: 'Седьмое правило Бойцовского клуба.',
// 					body: 'Если противник потерял сознание или делает вид, что потерял, или говорит «Хватит» — поединок окончен.'
// 				},
// 				{
// 					title: 'Восьмое и последнее правило Бойцовского клуба.',
// 					body: 'Новичок обязан принять бой.'
// 				},

// 			];
// "

// ===========додаткове від віктора========
// 1) Точная степень двойки.
// Дано натуральное число N.
// Выведите слово YES, если число N является точной степенью двойки,
// или слово NO в противном случае.
// Операцией возведения в степень пользоваться нельзя!

// 2) Deep Copy
// реалізувати глибоке копіювання обєкту за допомогою рекурсій

// 3) Flat
// Вирівняти багаторівневий масив в однорівневий
// [1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]
// ===========додаткове========